package com.spantry.inventory.domain;

import java.time.LocalDate;
import java.util.Objects;
import java.util.Optional;

/**
 * Represents an item stored in the pantry inventory. This class is immutable and focuses on
 * representing the state of an item.
 */
public final class InventoryItem {

  private final String itemId;
  private final String name;
  private final int quantity;
  private final Location location; // Assumes Location enum will be created in this package
  private final Optional<LocalDate> expirationDate;

  /**
   * Constructs a new immutable InventoryItem. The ID can be null initially if it is expected to be
   * generated by the repository.
   *
   * @param itemId The unique identifier for the item (can be null initially).
   * @param name The name of the item (non-null).
   * @param quantity The quantity of the item (must be non-negative).
   * @param location The storage location of the item (non-null).
   * @param expirationDate An Optional containing the expiration date, if applicable (non-null
   *     Optional).
   * @throws NullPointerException if name, location, or expirationDate is null.
   * @throws IllegalArgumentException if quantity is negative.
   */
  public InventoryItem(
      final String itemId,
      final String name,
      final int quantity,
      final Location location,
      final Optional<LocalDate> expirationDate) {
    this.itemId = itemId; // Allow null ID initially
    this.name = Objects.requireNonNull(name, "Item name cannot be null");
    if (quantity < 0) {
      throw new IllegalArgumentException("Quantity cannot be negative: " + quantity);
    }
    this.quantity = quantity;
    this.location = Objects.requireNonNull(location, "Item location cannot be null");
    this.expirationDate =
        Objects.requireNonNull(expirationDate, "Expiration date Optional cannot be null");
  }

  /**
   * Gets the unique identifier of the item.
   *
   * @return The non-null item ID.
   */
  public String getItemId() {
    return itemId;
  }

  /**
   * Gets the name of the item.
   *
   * @return The non-null item name.
   */
  public String getName() {
    return name;
  }

  /**
   * Gets the quantity of the item.
   *
   * @return The non-negative item quantity.
   */
  public int getQuantity() {
    return quantity;
  }

  /**
   * Gets the storage location of the item.
   *
   * @return The non-null item location.
   */
  public Location getLocation() {
    return location;
  }

  /**
   * Gets the expiration date of the item, if present.
   *
   * @return A non-null Optional containing the expiration date.
   */
  public Optional<LocalDate> getExpirationDate() {
    return expirationDate;
  }

  @Override
  public boolean equals(final Object other) {
    boolean isEqual = false; // Result variable
    if (this == other) {
      isEqual = true;
    } else if (other != null && getClass() == other.getClass()) {
      final InventoryItem item = (InventoryItem) other;
      // Compare all fields for equality
      isEqual =
          (quantity == item.quantity
              && Objects.equals(itemId, item.itemId)
              && Objects.equals(name, item.name)
              && Objects.equals(location, item.location)
              && Objects.equals(expirationDate, item.expirationDate));
    }
    return isEqual; // Single return point
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemId, name, quantity, location, expirationDate);
  }

  @Override
  public String toString() {
    return "InventoryItem{"
        + "itemId='"
        + itemId
        + '\''
        + ", name='"
        + name
        + '\''
        + ", quantity="
        + quantity
        + ", location="
        + location
        + ", expirationDate="
        + expirationDate
        + '}';
  }
}
